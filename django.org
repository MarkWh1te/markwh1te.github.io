#+TITLE: django 
#+BIND: org-html-validation-link nil

* Django ORM 
** queryset 
*** django queryset是有缓存的
    queryset 是有缓存的，a = A.objects.all(),print [i for i in a].第一次执行打印会查询数据库，然后结果会被保存在queryset内置的cache中，再执行print的时候就会取自缓存。
    很多时候会遇到仅需判断queryset 是否为空的情况，可以1. if queryset:pass 2.if queryset.count>0:pass 3.if queryset.exists():pass. 三种方式性能依次提升。
    当queryset非常巨大时，cache会成为问题。此时可以queryset.iterator()，迭代器的用处就不多说了，根据具体需求情况使用。
*** [[http://blog.etianen.com/blog/2013/06/08/django-querysets/][django queryset is lazy]]
*** 查看某个queryset背后的sql语句
    print  XX.objects.all().query
*** queryset中取第一项或者最后一项
    queryset.first() and queryset.last()
#+BEGIN_SRC python
    p = Article.objects.order_by('title', 'pub_date').first()
#+END_SRC 
    等价于
#+BEGIN_SRC python
    try:
        p = Article.objects.order_by('title', 'pub_date')[0]
    except IndexError:
        p = None
#+END_SRC 
*** 找到外键中与之相关的instances
    When you define a relationship in a model (i.e., a ForeignKey, OneToOneField, or ManyToManyField), instances of that model will have a convenient API to access the related object(s).

Using the models at the top of this page, for example, an Entry object e can get its associated Blogobject by accessing the blog attribute: e.blog.

(Behind the scenes, this functionality is implemented by Python descriptors. This shouldn’t really matter to you, but we point it out here for the curious.)

Django also creates API accessors for the “other” side of the relationship – the link from the related model to the model that defines the relationship. For example, a Blog object b has access to a list of all relatedEntry objects via the entry_set attribute: b.entry_set.all().

All examples in this section use the sample Blog, Author and Entry models defined at the top of this page.
*** Q object
**** django official document
     Complex lookups with Q objects¶
     Keyword argument queries – in filter(), etc. – are “AND”ed together. If you need to execute more complex queries (for example, queries with OR statements), you can use Q objects.
    A Q object (django.db.models.Q) is an object used to encapsulate a collection of keyword arguments. These keyword arguments are specified as in “Field lookups” above.

    For example, this Q object encapsulates a single LIKE query:

    from django.db.models import Q
    Q(question__startswith='What')
    Q objects can be combined using the & and | operators. When an operator is used on two Q objects, it yields a new Q object.

    For example, this statement yields a single Q object that represents the “OR” of two "question__startswith" queries:

    Q(question__startswith='Who') | Q(question__startswith='What')
    This is equivalent to the following SQL WHERE clause:

    WHERE question LIKE 'Who%' OR question LIKE 'What%'
    You can compose statements of arbitrary complexity by combining Q objects with the & and | operators and use parenthetical grouping. Also, Q objects can be negated using the ~ operator, allowing for combined lookups that combine both a normal query and a negated (NOT) query:

    Q(question__startswith='Who') | ~Q(pub_date__year=2005)
    Each lookup function that takes keyword-arguments (e.g. filter(), exclude(), get()) can also be passed one or more Q objects as positional (not-named) arguments. If you provide multiple Q object arguments to a lookup function, the arguments will be “AND”ed together. For example:

    Poll.objects.get(
        Q(question__startswith='Who'),
        Q(pub_date=date(2005, 5, 2)) | Q(pub_date=date(2005, 5, 6))
    )
    ... roughly translates into the SQL:

    SELECT * from polls WHERE question LIKE 'Who%'
        AND (pub_date = '2005-05-02' OR pub_date = '2005-05-06')
    Lookup functions can mix the use of Q objects and keyword arguments. All arguments provided to a lookup function (be they keyword arguments or Q objects) are “AND”ed together. However, if a Q object is provided, it must precede the definition of any keyword arguments. For example:

    Poll.objects.get(
        Q(pub_date=date(2005, 5, 2)) | Q(pub_date=date(2005, 5, 6)),
        question__startswith='Who',
    )
    ... would be a valid query, equivalent to the previous example; but:

    # INVALID QUERY
    Poll.objects.get(
        question__startswith='Who',
        Q(pub_date=date(2005, 5, 2)) | Q(pub_date=date(2005, 5, 6))
    )
    ... would not be valid.
*** django ForegenKey dabaseRepresentation 
    Behind the scenes, Django appends "_id" to the field name to create its database column name. In the above example, the database table for the Car model will have a manufacturer_id column. (You can change this explicitly by specifying db_column) However, your code should never have to deal with the database column name, unless you write custom SQL. You’ll always deal with the field names of your model object.
** Command line
***  table-already-exist
    since you already have the tables created in the database, you just need to run the initial migration as fake
    ./manage.py migrate myapp --fake
    make sure that the schema of models is same as schema of tables in database.
    [[http://stackoverflow.com/questions/3090648/django-south-table-already-exists][SO linke]]
